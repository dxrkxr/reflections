How is the staging area different from the working directory and the repository? What value do you think it offers?

- Staging area bir dizin veya depodan şöyle farklıdır: bir commit bırakmak istendiğinde şu an çalışılan alanı belirtir ve işler bittikten sonra bu staging areadaki dosyalar ve duzenlemeler icin bir commit bırakılabilmektedir.

Staging area'yı ne gibi yararlar için kullanabiliyoruz ? (staging area = kazırlık alanı)

- Buna cevap olarak staging area'da soyaların bi önceki sürümlerine göre sadece "git diff" komutunu kullanarak ne gibi değişiklikler yaptıgımızı görebiliyoruz. Ayrıca istediğimi dosyayı tek tek ekleyebilip bunlara commit girebiliyoruz.(git add <files> -> git commit <files>)Ayrıca git reset --hard HEAD komutuyla da son commit'e repository'i getirebiiyoruz. ayrıca commit sonrasında da olusabilecek LF TO CRLF warningleri için commit girip kayıt yaptıktan sonra bu uyarıdan kurtulmak için kullanabiliriz bunun dışında da branchlara geçiş yapmak için git checkout <master> gibi branch isimleriyle geçişler sağlayabiliriz.  

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

- Branch'ler projemizde değişiklikler yaparken bunları ayırıp farklı kollardan yürütmede oldukca başarılıdır. Bunun yanında örneğin bir oyunda farklı oyun seviyelerinde denemeler yapmak veya yeni bir özellik getirmeden önce mevcut sürüm üzerinde değişiklikleri kontrol ederken mevcut sürüme zarar vermemek adına da kullanılabilir. Kullanım şekli ise:
Yeni bir branch için -> git branch <branch_name>
Branchlar arası değişim için ise ->git checkout <branch_name>

How do the diagrams help you visualize the branch structure?

- Log kayıtlarına yani commitlere diyagramlar ile bakmak branch yapısını görselleştirirken bize commitler arasındaki kırılmaların nerede olduklarını gösterrler. Bizde bu kırılma noktalarına göre çeşitli commitler üzerinde denenmiş yeni çzellikleri veya benzeri işlemleri o commite dal olarak görebiliriz. git log --graph --oneline master coins gibi bir kod ile master branch'ı ile coins branch'ı arasındaki commitlerin nerelerde farklılaştığını görebilir buna göre daha kolay commitler arasında gezinti sağlayabiliriz. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

- İlk başta merge conflict aldım fakat bu conlict'i çözmek için git beni dosyayı düzenlemeye yönlendirdi ve istediğim kısımları bırakarak sonrasında dosyayı add'leyip commit girişi yaptım. Merged "coins" çıkışı normal bir çıkış olmaktadır. Diyagramla göstermenin nedeni sonradan birleştirilmiş branchlarda karışıklığa engel olmak adına bir ön gelişim idi.

